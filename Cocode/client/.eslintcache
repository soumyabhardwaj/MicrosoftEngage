[{"C:\\movie book\\Cocode\\client\\src\\index.tsx":"1","C:\\movie book\\Cocode\\client\\src\\reportWebVitals.ts":"2","C:\\movie book\\Cocode\\client\\src\\App.tsx":"3","C:\\movie book\\Cocode\\client\\src\\service\\TabsContext.tsx":"4","C:\\movie book\\Cocode\\client\\src\\service\\GuestNameContext.tsx":"5","C:\\movie book\\Cocode\\client\\src\\service\\SettingsContext.tsx":"6","C:\\movie book\\Cocode\\client\\src\\pages\\Login\\Login.tsx":"7","C:\\movie book\\Cocode\\client\\src\\pages\\Room\\Room.tsx":"8","C:\\movie book\\Cocode\\client\\src\\pages\\NavigateRooms\\NavigateRooms.tsx":"9","C:\\movie book\\Cocode\\client\\src\\config.keys.ts":"10","C:\\movie book\\Cocode\\client\\src\\pages\\Landing\\index.js":"11","C:\\movie book\\Cocode\\client\\src\\service\\ProtectedRoute.tsx":"12","C:\\movie book\\Cocode\\client\\src\\service\\LoginRoute.tsx":"13","C:\\movie book\\Cocode\\client\\src\\service\\UserContext.tsx":"14","C:\\movie book\\Cocode\\client\\src\\pages\\LoadingAnimation\\Loader.tsx":"15","C:\\movie book\\Cocode\\client\\src\\pages\\LoadingAnimation\\StartupAnimation.tsx":"16","C:\\movie book\\Cocode\\client\\src\\component\\Navbar.js":"17","C:\\movie book\\Cocode\\client\\src\\pages\\Landing\\Hero\\Hero.js":"18","C:\\movie book\\Cocode\\client\\src\\pages\\Landing\\AboutUs\\AboutUs.js":"19","C:\\movie book\\Cocode\\client\\src\\service\\socket.ts":"20","C:\\movie book\\Cocode\\client\\src\\component\\QuestionsPane\\ProblemList\\data.ts":"21","C:\\movie book\\Cocode\\client\\src\\pages\\Login\\Particles.config.tsx":"22","C:\\movie book\\Cocode\\client\\src\\component\\QuestionsPane\\Tabs.tsx":"23","C:\\movie book\\Cocode\\client\\src\\component\\InputOutputFile\\InputOutputFile.tsx":"24","C:\\movie book\\Cocode\\client\\src\\component\\VoiceChat\\VoiceChat.tsx":"25","C:\\movie book\\Cocode\\client\\src\\component\\Editor\\CodeMirrorEditor.tsx":"26","C:\\movie book\\Cocode\\client\\src\\component\\TextChat\\index.tsx":"27","C:\\movie book\\Cocode\\client\\src\\component\\QuestionsPane\\ProblemPage\\ProblemPage.tsx":"28","C:\\movie book\\Cocode\\client\\src\\service\\getRandomColor.ts":"29","C:\\movie book\\Cocode\\client\\src\\component\\QuestionsPane\\ProblemPage\\CodeForces.tsx":"30","C:\\movie book\\Cocode\\client\\src\\component\\TextChat\\ChatMessage.jsx":"31","C:\\movie book\\Cocode\\client\\src\\component\\QuestionsPane\\ProblemPage\\LeetCode.tsx":"32","C:\\movie book\\Cocode\\client\\src\\component\\TextChat\\ChatMessage-styles.ts":"33","C:\\movie book\\Cocode\\client\\src\\component\\Editor\\CodeMirrorImports.ts":"34","C:\\movie book\\Cocode\\client\\src\\component\\Editor\\CodeMirrorAdapter.js":"35","C:\\movie book\\Cocode\\client\\src\\component\\QuestionsPane\\ProblemList\\ProblemList.tsx":"36","C:\\movie book\\Cocode\\client\\src\\component\\QuestionsPane\\SettingsPage.tsx":"37","C:\\movie book\\Cocode\\client\\src\\service\\getRandomAvatar.ts":"38","C:\\movie book\\Cocode\\client\\src\\component\\QuestionsPane\\ProblemList\\ListPagination.tsx":"39","C:\\movie book\\Cocode\\client\\src\\component\\QuestionsPane\\ProblemList\\Autocomplete.tsx":"40"},{"size":517,"mtime":1633362668980,"results":"41","hashOfConfig":"42"},{"size":440,"mtime":1633362668996,"results":"43","hashOfConfig":"42"},{"size":3086,"mtime":1633761073153,"results":"44","hashOfConfig":"42"},{"size":2383,"mtime":1633757189174,"results":"45","hashOfConfig":"42"},{"size":1009,"mtime":1633362668997,"results":"46","hashOfConfig":"42"},{"size":1373,"mtime":1633362669000,"results":"47","hashOfConfig":"42"},{"size":3459,"mtime":1633756669740,"results":"48","hashOfConfig":"42"},{"size":6300,"mtime":1633362668995,"results":"49","hashOfConfig":"42"},{"size":3390,"mtime":1636455373448,"results":"50","hashOfConfig":"42"},{"size":464,"mtime":1633362668978,"results":"51","hashOfConfig":"42"},{"size":284,"mtime":1633362668985,"results":"52","hashOfConfig":"42"},{"size":814,"mtime":1633362668999,"results":"53","hashOfConfig":"42"},{"size":643,"mtime":1633362668998,"results":"54","hashOfConfig":"42"},{"size":1204,"mtime":1633362669002,"results":"55","hashOfConfig":"42"},{"size":408,"mtime":1633362668985,"results":"56","hashOfConfig":"42"},{"size":5441,"mtime":1633762249399,"results":"57","hashOfConfig":"42"},{"size":1210,"mtime":1633362668962,"results":"58","hashOfConfig":"42"},{"size":1658,"mtime":1633362668984,"results":"59","hashOfConfig":"42"},{"size":1802,"mtime":1633362668982,"results":"60","hashOfConfig":"42"},{"size":120,"mtime":1633362669004,"results":"61","hashOfConfig":"42"},{"size":8512,"mtime":1633362668967,"results":"62","hashOfConfig":"42"},{"size":1495,"mtime":1633362668990,"results":"63","hashOfConfig":"42"},{"size":2218,"mtime":1633362668972,"results":"64","hashOfConfig":"42"},{"size":5655,"mtime":1633362668961,"results":"65","hashOfConfig":"42"},{"size":1442,"mtime":1633362668977,"results":"66","hashOfConfig":"42"},{"size":3635,"mtime":1633362668958,"results":"67","hashOfConfig":"42"},{"size":3721,"mtime":1633362668975,"results":"68","hashOfConfig":"42"},{"size":703,"mtime":1633362668970,"results":"69","hashOfConfig":"42"},{"size":1347,"mtime":1633362669003,"results":"70","hashOfConfig":"42"},{"size":1326,"mtime":1633362668968,"results":"71","hashOfConfig":"42"},{"size":2779,"mtime":1633362668974,"results":"72","hashOfConfig":"42"},{"size":1388,"mtime":1633362668968,"results":"73","hashOfConfig":"42"},{"size":1413,"mtime":1633362668974,"results":"74","hashOfConfig":"42"},{"size":1323,"mtime":1633362668959,"results":"75","hashOfConfig":"42"},{"size":15242,"mtime":1633362668957,"results":"76","hashOfConfig":"42"},{"size":6681,"mtime":1633362668967,"results":"77","hashOfConfig":"42"},{"size":4245,"mtime":1633362668972,"results":"78","hashOfConfig":"42"},{"size":1047,"mtime":1633362669002,"results":"79","hashOfConfig":"42"},{"size":3227,"mtime":1633362668964,"results":"80","hashOfConfig":"42"},{"size":6936,"mtime":1633362668964,"results":"81","hashOfConfig":"42"},{"filePath":"82","messages":"83","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},"1mnlbeh",{"filePath":"84","messages":"85","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"86","messages":"87","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"88","messages":"89","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"90","messages":"91","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"92","messages":"93","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"94","messages":"95","errorCount":0,"fatalErrorCount":0,"warningCount":6,"fixableErrorCount":0,"fixableWarningCount":0,"source":"96"},{"filePath":"97","messages":"98","errorCount":0,"fatalErrorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"99"},{"filePath":"100","messages":"101","errorCount":0,"fatalErrorCount":0,"warningCount":7,"fixableErrorCount":0,"fixableWarningCount":0,"source":"102"},{"filePath":"103","messages":"104","errorCount":0,"fatalErrorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"105"},{"filePath":"106","messages":"107","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"108","messages":"109","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"110","messages":"111","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"112","messages":"113","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"114","messages":"115","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"116","messages":"117","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"118","messages":"119","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"120","messages":"121","errorCount":0,"fatalErrorCount":0,"warningCount":2,"fixableErrorCount":0,"fixableWarningCount":0,"source":"122"},{"filePath":"123","messages":"124","errorCount":0,"fatalErrorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"125"},{"filePath":"126","messages":"127","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"128","messages":"129","errorCount":0,"fatalErrorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"130"},{"filePath":"131","messages":"132","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"133","messages":"134","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"135","messages":"136","errorCount":0,"fatalErrorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"137"},{"filePath":"138","messages":"139","errorCount":0,"fatalErrorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"140"},{"filePath":"141","messages":"142","errorCount":0,"fatalErrorCount":0,"warningCount":5,"fixableErrorCount":0,"fixableWarningCount":0,"source":"143"},{"filePath":"144","messages":"145","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"146","messages":"147","errorCount":0,"fatalErrorCount":0,"warningCount":5,"fixableErrorCount":0,"fixableWarningCount":0,"source":"148"},{"filePath":"149","messages":"150","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"151","messages":"152","errorCount":0,"fatalErrorCount":0,"warningCount":4,"fixableErrorCount":0,"fixableWarningCount":0,"source":"153"},{"filePath":"154","messages":"155","errorCount":0,"fatalErrorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"156"},{"filePath":"157","messages":"158","errorCount":0,"fatalErrorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":1,"source":"159"},{"filePath":"160","messages":"161","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"162","messages":"163","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"164","messages":"165","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"166","messages":"167","errorCount":0,"fatalErrorCount":0,"warningCount":2,"fixableErrorCount":0,"fixableWarningCount":0,"source":"168"},{"filePath":"169","messages":"170","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"171","messages":"172","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"173","messages":"174","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"175","messages":"176","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},"C:\\movie book\\Cocode\\client\\src\\index.tsx",[],"C:\\movie book\\Cocode\\client\\src\\reportWebVitals.ts",[],"C:\\movie book\\Cocode\\client\\src\\App.tsx",[],"C:\\movie book\\Cocode\\client\\src\\service\\TabsContext.tsx",[],"C:\\movie book\\Cocode\\client\\src\\service\\GuestNameContext.tsx",[],"C:\\movie book\\Cocode\\client\\src\\service\\SettingsContext.tsx",[],"C:\\movie book\\Cocode\\client\\src\\pages\\Login\\Login.tsx",["177","178","179","180","181","182"],"import React, { useContext, useState } from \"react\";\r\nimport classes from \"./login.module.css\";\r\nimport Button from \"@material-ui/core/Button\";\r\nimport { GuestNameContext } from \"service/GuestNameContext\";\r\nimport { GuestNameContextTypes } from \"types\";\r\nimport GoogleSVG from \"assets/google.svg\";\r\nimport GithubPNG from \"assets/github.png\";\r\nimport TwitterPNG from \"assets/twitter.png\";\r\nimport { SERVER_URL } from \"config.keys\";\r\nimport Particles from \"pages/Login/Particles.config\";\r\nimport Loader from \"pages/LoadingAnimation/StartupAnimation\";\r\nimport { Redirect } from \"react-router-dom\";\r\nimport { PUBLIC_ROOM as pr, IS_DISABLED } from \"config.keys\";\r\n\r\nconst Login = () => {\r\n  const { guestName, handleGuestNameChange, isGuestNameClick, guestLoginClick } = useContext(\r\n    GuestNameContext\r\n  ) as GuestNameContextTypes;\r\n\r\n  const handleLogin = async (event: React.MouseEvent<HTMLButtonElement, MouseEvent>, provider: string) => {\r\n    event.preventDefault();\r\n    window.open(`${SERVER_URL}/auth/${provider}`, \"_self\");\r\n  };\r\n  const PUBLIC_ROOM = pr[Math.floor(Math.random() * pr.length)];\r\n  return (\r\n    <>\r\n      <div className={classes[\"root\"]}>\r\n        <Particles />\r\n        <div className={classes[\"login-box\"]}>\r\n          <div className={classes[\"login-box-formbox\"]}>\r\n            \r\n            <div className={classes[\"login-box-login\"]}>\r\n              <h1>Welcome to CoCode</h1>\r\n              <p>\r\n                <i>A real Time collaborative editor with embeded compiler</i>\r\n              </p>\r\n              <form action=\"#\">\r\n                <div>\r\n                  <label htmlFor=\"username\"> Guest Name</label>\r\n                  <input\r\n                    type=\"text\"\r\n                    name=\"username\"\r\n                    autoComplete=\"off\"\r\n                    value={guestName}\r\n                    onChange={(e) => handleGuestNameChange(e)}\r\n                    placeholder=\"Enter your Name\"\r\n                    className={classes[\"input-email\"]}\r\n                  />\r\n                </div>\r\n                <div>\r\n                  <Button className={classes[\"btn\"]} onClick={(e) => isGuestNameClick(e)}>\r\n                    Login as a guest\r\n                  </Button>\r\n                </div>\r\n              </form>\r\n            </div>\r\n          </div>\r\n          <div className={classes[\"login-box-quotebox\"]}>\r\n            <div className={classes[\"quote-container\"]}>\r\n              <div className={classes[\"quote\"]}>Code & Learn.</div>\r\n              <div className={classes[\"quote-small\"]}>\r\n                'A Real Time Collaborative Editor for practicising for coding Interviews'\r\n              </div>\r\n            </div>\r\n          </div>\r\n        </div>\r\n      </div>\r\n      {guestLoginClick ? <Redirect to=\"/room/public-room\"></Redirect> : <></>}\r\n    </>\r\n  );\r\n};\r\n// Only show the animation for the very first time the user comes to the site :)\r\nconst LoginAnimation = () => {\r\n  const [showAnimation, setShowAnimation] = useState<boolean>(true);\r\n\r\n  const retrivedKeyString = localStorage.getItem(\"showAnimation\");\r\n  const retrivedKey = retrivedKeyString ? JSON.parse(retrivedKeyString) : true;\r\n\r\n  if (showAnimation === true && retrivedKey === true)\r\n    setTimeout(() => {\r\n      localStorage.setItem(\"showAnimation\", \"false\");\r\n      setShowAnimation(false);\r\n    }, 7200);\r\n\r\n  return <>{showAnimation && retrivedKey ? <Loader /> : <Login />}</>;\r\n};\r\n\r\nexport default LoginAnimation;\r\n","C:\\movie book\\Cocode\\client\\src\\pages\\Room\\Room.tsx",["183"],"import React, { useState, createRef, useRef, useContext, useEffect } from \"react\";\r\nimport { Redirect } from \"react-router-dom\";\r\nimport InputOutputFile from \"component/InputOutputFile/InputOutputFile\";\r\nimport { ReflexContainer, ReflexElement, ReflexSplitter } from \"react-reflex\";\r\nimport \"react-reflex/styles.css\";\r\nimport style from \"./Room.module.css\";\r\nimport { socket } from \"service/socket\";\r\nimport { useSnackbar } from \"notistack\";\r\nimport ChatApp from \"component/TextChat\";\r\nimport VoiceChat from \"component/VoiceChat/VoiceChat\";\r\nimport { useParams } from \"react-router-dom\";\r\nimport CodeMirror from \"component/Editor/CodeMirrorEditor\";\r\nimport clsx from \"clsx\";\r\nimport { GuestNameContext } from \"service/GuestNameContext\";\r\nimport { UserContext } from \"service/UserContext\";\r\nimport { UserContextTypes, GuestNameContextTypes, UserInfoSS } from \"types\";\r\nimport TabsPanel from \"component/QuestionsPane/Tabs\";\r\nimport Button from \"@material-ui/core/Button\";\r\n\r\nconst Dashboard = () => {\r\n  const { enqueueSnackbar, closeSnackbar } = useSnackbar();\r\n  const { user } = useContext(UserContext) as UserContextTypes;\r\n  const { guestName } = useContext(GuestNameContext) as GuestNameContextTypes;\r\n  const CodeMirrorRef = useRef<any>();\r\n  const TextAreaRef = createRef<HTMLDivElement>();\r\n  const [rows, setRows] = useState(5);\r\n  const [sid, setSid] = useState(\"\");\r\n  const [goBack, setGoBack] = useState(false);\r\n  const [partnerUser, setPartnerUser] = useState<UserInfoSS>();\r\n  const [editorInstance, setEditorInstance] = useState<any>(null);\r\n  const { id } = useParams<Record<string, string>>();\r\n\r\n  const prepareData = (): UserInfoSS => {\r\n    return {\r\n      name: user?.name ? user.name : guestName,\r\n      image_link: user?.image_link ? user.image_link : \"\",\r\n      roomID: id,\r\n    };\r\n  };\r\n\r\n  const action = (key: any) => (\r\n    <>\r\n      <Button\r\n        style={{ color: \"white\" }}\r\n        onClick={() => {\r\n          localStorage.setItem(\"shouldShow\", JSON.stringify(false));\r\n          closeSnackbar(key);\r\n        }}\r\n      >\r\n        Don't Show Again\r\n      </Button>\r\n    </>\r\n  );\r\n\r\n  const displayNotification = (data: UserInfoSS, enter: boolean) => {\r\n    const text = enter ? \"joined the room\" : \"left the room\";\r\n    const variantStyle = enter ? \"success\" : \"error\";\r\n    enqueueSnackbar(`${data.name} ${text}`, {\r\n      preventDuplicate: true,\r\n      variant: variantStyle,\r\n    });\r\n  };\r\n\r\n  useEffect(() => {\r\n    const retrivedKeyString = localStorage.getItem(\"shouldShow\");\r\n    const retrivedKey = retrivedKeyString ? JSON.parse(retrivedKeyString) : true;\r\n\r\n    if (retrivedKey) {\r\n      enqueueSnackbar(\"Open the same link in another tab to see realtime collabotation\", {\r\n        action,\r\n      });\r\n    }\r\n\r\n    socket.emit(\"join-room\", prepareData());\r\n\r\n    socket.on(\"store-sid\", (id: string) => setSid(id));\r\n    socket.on(\"new-user-joined\", (data: UserInfoSS) => {\r\n      setPartnerUser(data);\r\n      displayNotification(data, true);\r\n    });\r\n\r\n    socket.on(\"room-full\", () => {\r\n      setGoBack(true);\r\n    });\r\n\r\n    socket.on(\"user-left\", (data: UserInfoSS) => {\r\n      displayNotification(data, false);\r\n    });\r\n  }, []);\r\n\r\n  const resetEditorLayout = () => {\r\n    const height = Math.floor(TextAreaRef!.current!.clientHeight);\r\n    const adjustedRows = height > 340 ? height / 27 : height / 39;\r\n    setRows(Math.floor(adjustedRows));\r\n    editorInstance.refresh();\r\n  };\r\n\r\n  return (\r\n    <>\r\n      <div className={style.root}>\r\n        <ReflexContainer orientation=\"horizontal\">\r\n          <ReflexElement style={{ paddingTop: \"1rem\" }}>\r\n            <ReflexContainer orientation=\"vertical\">\r\n              <ReflexElement>\r\n                <ReflexContainer orientation=\"horizontal\">\r\n                  <ReflexElement className={style[\"pane-color\"]}>\r\n                    <TabsPanel />\r\n                  </ReflexElement>\r\n                </ReflexContainer>\r\n              </ReflexElement>\r\n              {/* End of 1st content */}\r\n              <ReflexSplitter\r\n                className={clsx(style.splitter, style[\"splitter-verticle\"])}\r\n                onStopResize={() => resetEditorLayout()}\r\n              />\r\n              <ReflexElement flex={0.45}>\r\n                <ReflexContainer orientation=\"horizontal\">\r\n                  <ReflexElement style={{ display: \"flex\" }}>\r\n                    <CodeMirror editorInstance={editorInstance} setEditorInstance={setEditorInstance} />\r\n                  </ReflexElement>\r\n                  <ReflexSplitter\r\n                    className={clsx(style.splitter, style[\"splitter-horizontal\"])}\r\n                    onStopResize={() => resetEditorLayout()}\r\n                  />\r\n                  <ReflexElement flex={0.3}>\r\n                    <InputOutputFile rows={rows} TextAreaRef={TextAreaRef} editorInstance={editorInstance} />\r\n                  </ReflexElement>\r\n                </ReflexContainer>\r\n              </ReflexElement>\r\n              {/* 3rd content */}\r\n              <ReflexSplitter\r\n                className={clsx(style.splitter, style[\"splitter-verticle\"])}\r\n                onStopResize={() => resetEditorLayout()}\r\n              />\r\n              <ReflexElement>\r\n                <ReflexContainer orientation=\"horizontal\">\r\n                  {/* 0.12 */}\r\n                  <ReflexElement className={style[\"pane-color\"]} flex={0.18}>\r\n                    <VoiceChat params={id} user={prepareData()} partnerUser={partnerUser} />\r\n                  </ReflexElement>\r\n                  <ReflexSplitter className={clsx(style.splitter, style[\"splitter-horizontal\"])} />\r\n                  <ReflexElement className={style[\"chat-app\"]}>\r\n                    {/* Chat App Component */}\r\n                    <ChatApp userInfo={prepareData()} socketID={sid} />\r\n                  </ReflexElement>\r\n                </ReflexContainer>\r\n              </ReflexElement>\r\n            </ReflexContainer>\r\n          </ReflexElement>\r\n          <ReflexElement className={style.footer} flex={0.028}>\r\n            Made with <span>&#9829;</span> and Typescript\r\n          </ReflexElement>\r\n        </ReflexContainer>\r\n      </div>\r\n      {goBack ? <Redirect to={{ pathname: \"/home\", state: { showNotification: true } }} /> : <></>}\r\n    </>\r\n  );\r\n};\r\n\r\nexport default Dashboard;\r\n","C:\\movie book\\Cocode\\client\\src\\pages\\NavigateRooms\\NavigateRooms.tsx",["184","185","186","187","188","189","190"],"import React, { useState, useContext, useEffect } from \"react\";\r\nimport {\r\n  Avatar,\r\n  Button,\r\n  Grid,\r\n  InputAdornment,\r\n  Paper,\r\n  TextField,\r\n  Theme,\r\n  Tooltip,\r\n  Zoom,\r\n  withStyles,\r\n} from \"@material-ui/core\";\r\nimport { UserContextTypes } from \"types\";\r\nimport { Link, Redirect } from \"react-router-dom\";\r\nimport styles from \"./NavigateRooms.module.css\";\r\nimport generate from \"project-name-generator\";\r\nimport { useSnackbar } from \"notistack\";\r\nimport { useLocation } from \"react-router-dom\";\r\nimport Logo from \"../../assets/CoCode.svg\";\r\n\r\nconst LightTooltip = withStyles((theme: Theme) => ({\r\n  tooltip: {\r\n    backgroundColor: theme.palette.common.white,\r\n    color: \"rgba(0, 0, 0, 1)\",\r\n    boxShadow: theme.shadows[2],\r\n    fontSize: \"14px\",\r\n    borderRadius: \"25px\",\r\n  },\r\n}))(Tooltip);\r\n\r\nconst NavigateRoom = () => {\r\n  const { enqueueSnackbar } = useSnackbar();\r\n  const [link, setLink] = useState(\"\");\r\n  const [click, setClick] = useState(false);\r\n  const [backToLoginPage, setBackToLoginPage] = useState(false);\r\n  const location = useLocation();\r\n\r\n  useEffect(() => {\r\n    const tempLocation = location.state;\r\n    //@ts-ignore\r\n    let showNotification = tempLocation === undefined ? false : tempLocation.showNotification ? true : false;\r\n    if (showNotification) enqueueSnackbar(\"the room you want to enter is full\", { variant: \"warning\" });\r\n  }, []);\r\n\r\n  \r\n\r\n  return (\r\n    <>\r\n      <div className={styles.root}>\r\n        <Paper elevation={5} className={styles.toolbar}>\r\n          <div className={styles.toolbarHeading}>\r\n            <span>\r\n              <img src={Logo} width=\"55x\" height=\"55x\"></img>\r\n            </span>\r\n            <span className={styles.toolbarText}>Caucus</span>\r\n          </div>\r\n          <div className={styles.avatarFlex}>\r\n           \r\n            <Button>\r\n              Logout\r\n            </Button>\r\n          </div>\r\n        </Paper>\r\n        <Grid container direction=\"column\">\r\n          <h1 className={styles.heading}>Join a Private Room</h1>\r\n          <Grid item className={styles.textfield}>\r\n            <TextField\r\n              variant=\"outlined\"\r\n              onChange={(e) => setLink(e.target.value)}\r\n              InputProps={{\r\n                startAdornment: <InputAdornment position=\"start\"></InputAdornment>,\r\n              }}\r\n            />\r\n            <Button\r\n              variant=\"contained\"\r\n              onClick={() => {\r\n                setClick(link ? true : false);\r\n              }}\r\n            >\r\n              Join Room\r\n            </Button>\r\n          </Grid>\r\n          <Grid item className={styles.createRoom}>\r\n            <Link to={`/room/${generate({ words: 2, alliterative: true }).dashed}`}>\r\n              <Button variant=\"contained\">Create a Private Room</Button>\r\n            </Link>\r\n            <Link to='\\'>\r\n              <Button variant=\"contained\">Join A Public Room</Button>\r\n            </Link>\r\n          </Grid>\r\n        </Grid>\r\n        <footer>\r\n          Made with <span>&#9829;</span> by Rishabh Malhotra{\"  \"}•{\"  \"}\r\n          <a href=\"https://github.com/Rishabh-malhotraa/codeforces-diary\" target=\"__blank\">\r\n            Github\r\n          </a>\r\n        </footer>\r\n        {click ? <Redirect to={`/room/${link}`} /> : <></>}\r\n        {backToLoginPage ? <Redirect to={`/`} /> : <></>}\r\n      </div>\r\n    </>\r\n  );\r\n};\r\n\r\nexport default NavigateRoom;\r\n","C:\\movie book\\Cocode\\client\\src\\config.keys.ts",["191"],"export const SERVER_URL = process.env.REACT_APP_SERVER_URL! || \"http://localhost:5000\";\r\nexport const CLIENT_URL = process.env.REACT_APP_CLIENT_URL! || \"http://localhost:3000\";\r\nexport const CDRT_SERVER = process.env.REACT_APP_CRDT_SERVER! || \"ws://localhost:1234\";\r\nexport const PUBLIC_ROOM = [\"public-room1\", \"public-room2\", \"public-room3\", \"public-room4\", \"public-room5\"];\r\nexport const IS_DISABLED = process.env.REACT_APP_NETLIFY == undefined ? false : true;\r\n","C:\\movie book\\Cocode\\client\\src\\pages\\Landing\\index.js",[],"C:\\movie book\\Cocode\\client\\src\\service\\ProtectedRoute.tsx",[],"C:\\movie book\\Cocode\\client\\src\\service\\LoginRoute.tsx",[],"C:\\movie book\\Cocode\\client\\src\\service\\UserContext.tsx",[],"C:\\movie book\\Cocode\\client\\src\\pages\\LoadingAnimation\\Loader.tsx",[],"C:\\movie book\\Cocode\\client\\src\\pages\\LoadingAnimation\\StartupAnimation.tsx",[],"C:\\movie book\\Cocode\\client\\src\\component\\Navbar.js",[],"C:\\movie book\\Cocode\\client\\src\\pages\\Landing\\Hero\\Hero.js",["192","193"],"import Container from \"@mui/material/Container\";\r\nimport heroimg from \"../../../assets/CoCode.svg\";\r\nimport Typography from \"@mui/material/Typography\";\r\nimport Button from \"@mui/material/Button\";\r\nimport { Link } from \"react-router-dom\";\r\n\r\nimport \"./Hero.css\";\r\n\r\nconst Hero = () => {\r\n  const containerStyles = {\r\n    display: \"flex\",\r\n    alignItems: \"center\",\r\n    justifyContent: \"center\",\r\n    gap: \"50px\",\r\n  };\r\n  return (\r\n    <div className=\"hero\">\r\n      <Container style={containerStyles}>\r\n        <div className=\"text\">\r\n          <Typography\r\n            variant=\"h2\"\r\n            component=\"div\"\r\n            style={{\r\n              color: \"#23272A\",\r\n              fontWeight: \"bold\",\r\n              marginBottom: \"10px\",\r\n              color: \"white\"\r\n            }}\r\n            className = \"Heading\"\r\n          >\r\n            Code along with<br/>your friends and batchmates\r\n          </Typography>\r\n          <small style={{ color: \"grey\" }}>\r\n            Peer coding made easy and handy.\r\n          </small>\r\n          <div\r\n            style={{\r\n              marginTop: \"20px\",\r\n              display: \"flex\",\r\n              alignItems: \"center\",\r\n              gap: \"20px\",\r\n            }}\r\n            className=\"btns\"\r\n          >\r\n            <Button href = \"/login\" variant=\"contained\" >Login</Button>\r\n            <Button href = \"/room/public-room\" variant=\"outlined\" style = {{color: \"white\"}}>Login as Guest</Button>\r\n          </div>\r\n        </div>\r\n        <div className=\"Image\">\r\n          <img src={heroimg} alt=\"Hero\" width = \"600px\"/>\r\n        </div>\r\n      </Container>\r\n    </div>\r\n  );\r\n};\r\n\r\nexport default Hero;\r\n","C:\\movie book\\Cocode\\client\\src\\pages\\Landing\\AboutUs\\AboutUs.js",["194"],"import React from \"react\";\r\nimport Typography from \"@mui/material/Typography\";\r\n\r\nimport \"./AboutUs.css\";\r\n\r\nconst AboutUs = () => {\r\n  return (\r\n    <div>\r\n      <h1\r\n        style={{\r\n          textAlign: \"center\",\r\n          marginTop: \"100px\",\r\n          fontFamily: '\"Montserrat\", sans-serif',\r\n        }}\r\n      >\r\n        ABOUT US\r\n      </h1>\r\n      <div className=\"container\">\r\n        <div className=\"left box\">\r\n          <Typography\r\n            variant=\"h2\"\r\n            component=\"div\"\r\n            style={{\r\n              color: \"#23272A\",\r\n              fontWeight: \"bold\",\r\n              marginBottom: \"40px\",\r\n            }}\r\n            className=\"box_head\"\r\n          >\r\n            Our Work\r\n          </Typography>\r\n          <h4 style={{ color: \"white\", textAlign: \"justify\" }}>\r\n            Go-To online platform for all the Farmers and Contractors out there.\r\n            We simplify the process of finding a buyer for your produced goods\r\n            as well as finding farmers for any contract\r\n          </h4>\r\n        </div>\r\n        <div className=\"right box\">\r\n          <Typography\r\n            variant=\"h2\"\r\n            component=\"div\"\r\n            style={{\r\n              color: \"#23272A\",\r\n              fontWeight: \"bold\",\r\n              marginBottom: \"40px\",\r\n            }}\r\n            className=\"box_head\"\r\n          >\r\n            Our Culture\r\n          </Typography>\r\n          <h4 style={{ color: \"white\", textAlign: \"justify\" }}>\r\n            We are on a mission to make the farming system more transparent and\r\n            provide an easy interface for all your needs by making the farming\r\n            services accessible to all and on-demand for every need.\r\n          </h4>\r\n        </div>\r\n      </div>\r\n    </div>\r\n  );\r\n};\r\n\r\nexport default AboutUs;\r\n","C:\\movie book\\Cocode\\client\\src\\service\\socket.ts",[],"C:\\movie book\\Cocode\\client\\src\\component\\QuestionsPane\\ProblemList\\data.ts",["195"],"import { ScrappedDataType } from \"types\";\r\n\r\nexport const tagsData = [\r\n  {\r\n    name: \"Dynamic Programming\",\r\n    color: \"#BFCBC2\",\r\n    description: \"Those who cannot remember the past are condemned to repeat it\",\r\n  },\r\n  {\r\n    name: \"Array\",\r\n    color: \"#e9c46a\",\r\n    description: \"Harder than they seem\",\r\n  },\r\n  {\r\n    name: \"Graph\",\r\n    color: \"#90E0F3\",\r\n    description: \"Easier than they seem.\",\r\n  },\r\n  {\r\n    name: \"Trie\",\r\n    color: \"#264653\",\r\n    description: \"Yes. Tries. Not a typo.\",\r\n  },\r\n  {\r\n    name: \"Linked List\",\r\n    color: \"#dc2f02\",\r\n    description: \"Reverse them.\",\r\n  },\r\n  {\r\n    name: \"Tree\",\r\n    color: \"#f4a261\",\r\n    description: \"Invert them.\",\r\n  },\r\n  {\r\n    name: \"String\",\r\n    color: \"#d73a4a\",\r\n    description: `\"This is a string.\"`,\r\n  },\r\n  {\r\n    name: \"Sort\",\r\n    color: \"#e76f51\",\r\n    description: \"Ah! Another Weasley. I know just what to do with you... GRYFFINDOR!\",\r\n  },\r\n  {\r\n    name: \"Recursion\",\r\n    color: \"#605F5E\",\r\n    description: \"GNU = GNU not unix\",\r\n  },\r\n  {\r\n    name: \"Heap\",\r\n    color: \"#d93f0b\",\r\n    description: \"Fancy trees.\",\r\n  },\r\n  {\r\n    name: \"Binary Search Tree\",\r\n    color: \"#f48c06\",\r\n    description: \"BS Trees\",\r\n  },\r\n  {\r\n    name: \"Binary Indexed Tree\",\r\n    color: \"#fec1c1\",\r\n    description: \"Really Hard Trees\",\r\n  },\r\n  {\r\n    name: \"Greedy\",\r\n    color: \"#d876e3\",\r\n    description: \"💰🤑\",\r\n  },\r\n  {\r\n    name: \"Divide and Conquer\",\r\n    color: \"#008672\",\r\n    description: \"British Raj\",\r\n  },\r\n  {\r\n    name: \"Random\",\r\n    color: \"#0e8a16\",\r\n    description: \"🔀\",\r\n  },\r\n  {\r\n    name: \"Geometry\",\r\n    color: \"#215cea\",\r\n    description: \"(⌐■_■)\",\r\n  },\r\n  {\r\n    name: \"Brainteaser\",\r\n    color: \"#B8B3E9\",\r\n    description: \"( ͡° ͜ʖ ͡°)\",\r\n  },\r\n  {\r\n    name: \"Rolling Hash\",\r\n    color: \"#eeeeee\",\r\n    description: \"🚬\",\r\n  },\r\n  {\r\n    name: \"Two Pointers\",\r\n    color: \"#3e4b9e\",\r\n    description: \"🐫\",\r\n  },\r\n  {\r\n    name: \"Stack\",\r\n    color: \"#fbca04\",\r\n    description: \"\",\r\n  },\r\n  {\r\n    name: \"Binary Search\",\r\n    color: \"#7057ff\",\r\n    description: \"\",\r\n  },\r\n\r\n  {\r\n    name: \"Hash Table\",\r\n    color: \"#cfd3d7\",\r\n    description: \"\",\r\n  },\r\n  {\r\n    name: \"Depth-first Search\",\r\n    color: \"#fef2c0\",\r\n    description: \"\",\r\n  },\r\n\r\n  {\r\n    name: \"Suffix Array\",\r\n    color: \"#d4c5f9\",\r\n    description: \"\",\r\n  },\r\n  {\r\n    name: \"Union Find\",\r\n    color: \"#006b75\",\r\n    description: \"\",\r\n  },\r\n  {\r\n    name: \"Math\",\r\n    color: \"#84b6eb\",\r\n    description: \"\",\r\n  },\r\n\r\n  {\r\n    name: \"Sliding Window\",\r\n    color: \"#fbca04\",\r\n    description: \"\",\r\n  },\r\n\r\n  {\r\n    name: \"Line Sweep\",\r\n    color: \"#75F4F4\",\r\n    description: \"\",\r\n  },\r\n  {\r\n    name: \"Dequeue\",\r\n    color: \"#D999B9\",\r\n    description: \"\",\r\n  },\r\n  {\r\n    name: \"Topological Sort\",\r\n    color: \"#D17B88\",\r\n    description: \"\",\r\n  },\r\n  {\r\n    name: \"Breadth-first Search\",\r\n    color: \"#FB3640\",\r\n    description: \"\",\r\n  },\r\n\r\n  {\r\n    name: \"Backtracking\",\r\n    color: \"#1D3461\",\r\n    description: \"\",\r\n  },\r\n  {\r\n    name: \"Design\",\r\n    color: \"#1F487E\",\r\n    description: \"\",\r\n  },\r\n  {\r\n    name: \"Minimax\",\r\n    color: \"#247BA0\",\r\n    description: \"\",\r\n  },\r\n\r\n  {\r\n    name: \"Queue\",\r\n    color: \"#2a9d8f\",\r\n    description: \"\",\r\n  },\r\n\r\n  {\r\n    name: \"Memoization\",\r\n    color: \"#03071e\",\r\n    description: \"\",\r\n  },\r\n  {\r\n    name: \"Segment Tree\",\r\n    color: \"#370617\",\r\n    description: \"\",\r\n  },\r\n  {\r\n    name: \"Ordered Map\",\r\n    color: \"#6a040f\",\r\n    description: \"\",\r\n  },\r\n  {\r\n    name: \"Bit Manipulation\",\r\n    color: \"#9d0208\",\r\n    description: \"\",\r\n  },\r\n  {\r\n    name: \"Reservoir Sampling\",\r\n    color: \"#d00000\",\r\n    description: \"\",\r\n  },\r\n  {\r\n    name: \"Rejection Sampling\",\r\n    color: \"#dc2f02\",\r\n    description: \"\",\r\n  },\r\n\r\n  {\r\n    name: \"Meet in the Middle\",\r\n    color: \"#ffba08\",\r\n    description: \"\",\r\n  },\r\n];\r\n\r\nexport const companiesData = [\r\n  {\r\n    name: \"Google\",\r\n    color: \"#007f5f\",\r\n    description: \"\",\r\n  },\r\n  {\r\n    name: \"Amazon\",\r\n    color: \"#2b9348\",\r\n    description: \"\",\r\n  },\r\n  {\r\n    name: \"Microsoft\",\r\n    color: \"#55a630\",\r\n    description: \"\",\r\n  },\r\n  {\r\n    name: \"Facebook\",\r\n    color: \"#80b918\",\r\n    description: \"\",\r\n  },\r\n  {\r\n    name: \"Apple\",\r\n    color: \"#aacc00\",\r\n    description: \"\",\r\n  },\r\n  {\r\n    name: \"ByteDance\",\r\n    color: \"#abcd01\",\r\n    description: \"\",\r\n  },\r\n  {\r\n    name: \"Adobe\",\r\n    color: \"#bfd200\",\r\n    description: \"\",\r\n  },\r\n  {\r\n    name: \"Snapchat\",\r\n    color: \"#d4d700\",\r\n    description: \"\",\r\n  },\r\n  {\r\n    name: \"Uber\",\r\n    color: \"#dddf00\",\r\n    description: \"\",\r\n  },\r\n  {\r\n    name: \"Bloomberg\",\r\n    color: \"#eeef20\",\r\n    description: \"\",\r\n  },\r\n  {\r\n    name: \"Yahoo\",\r\n    color: \"#ffff3f\",\r\n    description: \"\",\r\n  },\r\n  {\r\n    name: \"Paypal\",\r\n    color: \"#ffba08\",\r\n    description: \"\",\r\n  },\r\n  {\r\n    name: \"Directi\",\r\n    color: \"#faa307\",\r\n    description: \"\",\r\n  },\r\n  {\r\n    name: \"Walmart\",\r\n    color: \"#f48c06\",\r\n    description: \"\",\r\n  },\r\n  {\r\n    name: \"LinkedIn\",\r\n    color: \"#e85d04\",\r\n    description: \"\",\r\n  },\r\n  {\r\n    name: \"Spotify\",\r\n    color: \"#dc2f02\",\r\n    description: \"\",\r\n  },\r\n  {\r\n    name: \"Salesforce\",\r\n    color: \"#d00000\",\r\n    description: \"\",\r\n  },\r\n  {\r\n    name: \"Twitter\",\r\n    color: \"#9d0208\",\r\n    description: \"\",\r\n  },\r\n  {\r\n    name: \"Arcesium\",\r\n    color: \"#6a040f\",\r\n    description: \"\",\r\n  },\r\n  {\r\n    name: \"Cisco\",\r\n    color: \"#370617\",\r\n    description: \"\",\r\n  },\r\n\r\n  {\r\n    name: \"Flipkart\",\r\n    color: \"#001d3d\",\r\n    description: \"\",\r\n  },\r\n  {\r\n    name: \"Oracle\",\r\n    color: \"#133c55\",\r\n    description: \"\",\r\n  },\r\n  {\r\n    name: \"DE Shaw\",\r\n    color: \"#386fa4\",\r\n    description: \"\",\r\n  },\r\n  {\r\n    name: \"BNY Mellon\",\r\n    color: \"#3e7cb1\",\r\n    description: \"\",\r\n  },\r\n  {\r\n    name: \"Goldman Sachs\",\r\n    color: \"#81a4cd\",\r\n    description: \"\",\r\n  },\r\n  {\r\n    name: \"JP Morgan\",\r\n    color: \"#c0d6df\",\r\n    description: \"\",\r\n  },\r\n];\r\n\r\nexport const difficultyData = [\r\n  {\r\n    name: \"easy\",\r\n    color: \"#0e8a16\",\r\n    description: \"Easy Peasy Lemon Squisy\",\r\n  },\r\n  {\r\n    name: \"medium\",\r\n    color: \"#fbca04\",\r\n    description: \"Best Practice Questions\",\r\n  },\r\n  {\r\n    name: \"hard\",\r\n    color: \"#d93f0b\",\r\n    description: \"It's going to be a bumpy road ahead.\",\r\n  },\r\n];\r\n\r\nexport const allDifficulties = difficultyData.map((el) => el.name);\r\nexport const allTags = tagsData.map((el) => el.name);\r\nexport const allCompanies = companiesData.map((el) => el.name);\r\n\r\nexport const FirstQuestion = {\r\n  tags: [\"Array\", \"Hash Table\"],\r\n  question_data: {\r\n    question_id: 1,\r\n    title: \"1. Two Sum\",\r\n    question_title: \"Two Sum\",\r\n    problem_url: \"https://leetcode.com/problems/two-sum\",\r\n    difficulty_level: 1,\r\n    difficulty: \"easy\",\r\n    question:\r\n      '<div class=\"content__u3I1 question-content__JfgR\"><div><p>Given an array of integers <code>nums</code> and an integer <code>target</code>, return <em>indices of the two numbers such that they add up to <code>target</code></em>.</p>\\n<p>You may assume that each input would have <strong><em>exactly</em> one solution</strong>, and you may not use the <em>same</em> element twice.</p>\\n<p>You can return the answer in any order.</p>\\n<p> </p>\\n<p><strong>Example 1:</strong></p>\\n<pre><strong>Input:</strong> nums = [2,7,11,15], target = 9\\n<strong>Output:</strong> [0,1]\\n<strong>Output:</strong> Because nums[0] + nums[1] == 9, we return [0, 1].\\n</pre>\\n<p><strong>Example 2:</strong></p>\\n<pre><strong>Input:</strong> nums = [3,2,4], target = 6\\n<strong>Output:</strong> [1,2]\\n</pre>\\n<p><strong>Example 3:</strong></p>\\n<pre><strong>Input:</strong> nums = [3,3], target = 6\\n<strong>Output:</strong> [0,1]\\n</pre>\\n<p> </p>\\n<p><strong>Constraints:</strong></p>\\n<ul>\\n<li><code>2 &lt;= nums.length &lt;= 10<sup>3</sup></code></li>\\n<li><code>-10<sup>9</sup> &lt;= nums[i] &lt;= 10<sup>9</sup></code></li>\\n<li><code>-10<sup>9</sup> &lt;= target &lt;= 10<sup>9</sup></code></li>\\n<li><strong>Only one valid answer exists.</strong></li>\\n</ul>\\n</div></div>',\r\n  },\r\n  companies: [\r\n    \"Amazon\",\r\n    \"Adobe\",\r\n    \"Apple\",\r\n    \"Bloomberg\",\r\n    \"Cisco\",\r\n    \"Facebook\",\r\n    \"Goldman Sachs\",\r\n    \"Google\",\r\n    \"LinkedIn\",\r\n    \"Microsoft\",\r\n    \"Oracle\",\r\n    \"Paypal\",\r\n    \"Salesforce\",\r\n    \"Snapchat\",\r\n    \"Twitter\",\r\n    \"Uber\",\r\n    \"Walmart\",\r\n    \"ByteDance\",\r\n    \"Spotify\",\r\n    \"Yahoo\",\r\n  ],\r\n};\r\n\r\nexport const intialScrappedData = {\r\n  htmlString: \"\",\r\n  hostname: \"codeforces.com\",\r\n};\r\n","C:\\movie book\\Cocode\\client\\src\\pages\\Login\\Particles.config.tsx",[],"C:\\movie book\\Cocode\\client\\src\\component\\QuestionsPane\\Tabs.tsx",[],"C:\\movie book\\Cocode\\client\\src\\component\\InputOutputFile\\InputOutputFile.tsx",["196"],"import React, { useState, useEffect, useContext } from \"react\";\r\nimport { Paper, Tab, Tabs, Button, Box, TextField, CircularProgress } from \"@material-ui/core\";\r\nimport SendRoundedIcon from \"@material-ui/icons/SendRounded\";\r\nimport { withStyles } from \"@material-ui/core/styles\";\r\nimport { useSnackbar } from \"notistack\";\r\nimport { socket } from \"service/socket\";\r\nimport { useParams } from \"react-router-dom\";\r\nimport axios from \"axios\";\r\nimport { SERVER_URL } from \"config.keys\";\r\nimport { SettingContext } from \"service/SettingsContext\";\r\nimport { SettingsContextType } from \"types\";\r\nimport styles from \"./InputOutputFile.module.css\";\r\nimport Loader from \"react-loader-spinner\";\r\nimport \"react-loader-spinner/dist/loader/css/react-spinner-loader.css\";\r\n\r\ninterface AppProps {\r\n  TextAreaRef: React.RefObject<HTMLDivElement>;\r\n  editorInstance: any;\r\n  rows: number;\r\n}\r\n\r\nconst CssTextField = withStyles({\r\n  root: {\r\n    // #115293\r\n    padding: \"1rem\",\r\n    height: \"100%\",\r\n    width: \"100%\",\r\n    \"& .MuiInputBase-root\": {\r\n      outline: \"none\",\r\n      color: \"whitesmoke\",\r\n    },\r\n    \"& label.Mui-focused\": {\r\n      color: \"#0055bb\",\r\n    },\r\n    \"& .MuiInput-underline:after\": {\r\n      borderBottomColor: \"#0055bb\",\r\n    },\r\n    \"& .MuiOutlinedInput-root\": {\r\n      \"& fieldset\": {\r\n        borderColor: \"#0055bb\",\r\n      },\r\n      \"&:hover fieldset\": {\r\n        borderColor: \"#0055bb\",\r\n      },\r\n      \"&.Mui-focused fieldset\": {\r\n        borderColor: \"#0055bb\",\r\n      },\r\n    },\r\n  },\r\n})(TextField);\r\n\r\nconst InputOutputFile: React.FC<AppProps> = ({ TextAreaRef, rows, editorInstance }) => {\r\n  const { id } = useParams<Record<string, string>>();\r\n  const [value, setValue] = useState(0);\r\n  const [loading, setLoading] = useState(false);\r\n  const [inputText, setInputText] = useState(\"\");\r\n  const [outputData, setOutputData] = useState<Record<string, any>>({\r\n    output: \"\",\r\n    memory: 1,\r\n    cpuTime: 1,\r\n  });\r\n\r\n  const { language } = useContext(SettingContext) as SettingsContextType;\r\n  const { enqueueSnackbar } = useSnackbar();\r\n\r\n  useEffect(() => {\r\n    socket.on(\"emit-input-data\", (inputData: string) => {\r\n      setInputText(inputData);\r\n    });\r\n    socket.on(\"emit-code-executed\", (outputResponse: Record<string, any>) => {\r\n      enqueueSnackbar(\r\n        outputResponse.memory === null || outputResponse.memory === null\r\n          ? \"Error in code-execution\"\r\n          : \"Code ran successfully\",\r\n        {\r\n          variant: outputResponse.memory === null || outputResponse.memory === null ? \"error\" : \"success\",\r\n        }\r\n      );\r\n      setOutputData(outputResponse);\r\n      setValue(1);\r\n    });\r\n  }, []);\r\n\r\n  const submitProblem = async () => {\r\n    setLoading(true);\r\n    setValue(1);\r\n    const response = await axios({\r\n      method: \"POST\",\r\n      url: `${SERVER_URL}/api/execute`,\r\n      data: {\r\n        script: editorInstance.getValue(),\r\n        language: language,\r\n        stdin: inputText,\r\n      },\r\n      responseType: \"json\",\r\n    });\r\n    socket.emit(\"code-executed\", { data: response.data, roomID: id });\r\n    enqueueSnackbar(\r\n      response.data.memory === null || response.data.memory === null\r\n        ? \"Error in code-execution\"\r\n        : \"Code ran succesfully\",\r\n      {\r\n        variant: response.data.memory === null || response.data.memory === null ? \"error\" : \"success\",\r\n      }\r\n    );\r\n    setOutputData(response.data);\r\n    setLoading(false);\r\n  };\r\n\r\n  const handleChange = (event: React.ChangeEvent<{}>, newValue: number) => {\r\n    setValue(newValue);\r\n  };\r\n\r\n  const inputTextFn = (value: string) => {\r\n    setInputText(value);\r\n    socket.emit(\"input-data\", { data: value, roomID: id });\r\n  };\r\n\r\n  /**\r\n   * Here we render text area based on index position and additional\r\n   * logic for handling how to display the output on code execution\r\n   * @param index - Tabs Index value 0 from output 1 from input\r\n   */\r\n  const RenderTextArea = ({ index }: { index: number }) => {\r\n    return loading ? (\r\n      <div className={styles.loader}>\r\n        <Loader type=\"Grid\" color=\"#f5f5f5\" height={80} width={80} />\r\n      </div>\r\n    ) : (\r\n      <div\r\n        style={{\r\n          padding: \"1rem\",\r\n          minHeight: \"70%\",\r\n          textAlign: \"left\",\r\n          color: outputData.memory === null || outputData.memory === null ? \"#dd2c00\" : \"inherit\",\r\n        }}\r\n      >\r\n        <pre>{outputData.output}</pre>\r\n      </div>\r\n    );\r\n  };\r\n\r\n  return (\r\n    <div className={styles.root} ref={TextAreaRef}>\r\n      <Paper className={styles.toolbar}>\r\n        <Tabs\r\n          value={value}\r\n          onChange={(event, value) => handleChange(event, value)}\r\n          indicatorColor=\"primary\"\r\n          textColor=\"inherit\"\r\n          centered\r\n        >\r\n          <Tab label=\"Input\"></Tab>\r\n          <Tab label=\"Output\"></Tab>\r\n        </Tabs>\r\n        <Box className={styles[\"btn-box\"]}>\r\n          <Button\r\n            variant=\"text\"\r\n            color=\"inherit\"\r\n            endIcon={<SendRoundedIcon />}\r\n            onClick={async () => {\r\n              await submitProblem();\r\n            }}\r\n          >\r\n            Run Code\r\n          </Button>\r\n        </Box>\r\n      </Paper>\r\n      <div className={styles[\"text-area\"]}>\r\n        {value === 0 ? (\r\n          <CssTextField\r\n            key=\"1\"\r\n            size=\"medium\"\r\n            variant=\"outlined\"\r\n            value={inputText}\r\n            onChange={(event) => inputTextFn(event.target.value)}\r\n            multiline\r\n            rows={rows}\r\n          />\r\n        ) : (\r\n          <RenderTextArea index={value} />\r\n        )}\r\n      </div>\r\n    </div>\r\n  );\r\n};\r\n\r\nexport default InputOutputFile;\r\n","C:\\movie book\\Cocode\\client\\src\\component\\VoiceChat\\VoiceChat.tsx",["197"],"import React from \"react\";\r\nimport { Avatar, Button, withStyles, Theme, Tooltip, Zoom } from \"@material-ui/core\";\r\nimport { UserInfoSS } from \"types\";\r\nimport getRandomAvatar from \"service/getRandomAvatar\";\r\n/**\r\n * Invoke Call Peer when the component loads and if the guest user is empty then chill just return\r\n */\r\n\r\ninterface AppProps {\r\n  params: string;\r\n  partnerUser?: UserInfoSS;\r\n  user?: UserInfoSS;\r\n}\r\n\r\nconst LightTooltip = withStyles((theme: Theme) => ({\r\n  tooltip: {\r\n    backgroundColor: theme.palette.common.white,\r\n    color: \"rgba(0, 0, 0, 1)\",\r\n    boxShadow: theme.shadows[2],\r\n    fontSize: \"14px\",\r\n    borderRadius: \"25px\",\r\n  },\r\n}))(Tooltip);\r\n\r\nconst RenderIcons = ({ user }: { user?: UserInfoSS }) => {\r\n  if (!user) return <></>;\r\n  return (\r\n    <>\r\n      <LightTooltip TransitionComponent={Zoom} title={user?.name || \"John Doe\"} placement=\"bottom\">\r\n        <Avatar\r\n          alt={user.name}\r\n          src={user.image_link || getRandomAvatar()}\r\n          style={{ width: \"64px\", height: \"64px\", margin: \".6rem 1rem\" }}\r\n        >\r\n          {user.name.charAt(0)}\r\n        </Avatar>\r\n      </LightTooltip>\r\n    </>\r\n  );\r\n};\r\n\r\nconst Icons: React.FC<AppProps> = ({ params, partnerUser, user }) => {\r\n  return (\r\n    <div style={{ display: \"flex\" }}>\r\n      <RenderIcons user={user} />\r\n      {partnerUser?.roomID ? <RenderIcons user={partnerUser} /> : <></>}\r\n    </div>\r\n  );\r\n};\r\n\r\nexport default Icons;\r\n","C:\\movie book\\Cocode\\client\\src\\component\\Editor\\CodeMirrorEditor.tsx",["198","199","200","201","202"],"import React, { useEffect, useContext, useRef } from \"react\";\r\nimport { CDRT_SERVER } from \"config.keys\";\r\nimport { CodeMirrorBinding } from \"./CodeMirrorAdapter\";\r\nimport { GuestNameContext } from \"service/GuestNameContext\";\r\nimport { UserContext } from \"service/UserContext\";\r\nimport { SettingContext } from \"service/SettingsContext\";\r\nimport { useSnackbar } from \"notistack\";\r\nimport { useParams } from \"react-router-dom\";\r\nimport \"./CodeMirrorImports.ts\";\r\nimport { GuestNameContextTypes, SettingsContextType, UserContextTypes } from \"types\";\r\nimport { UnControlled as CodeMirror } from \"react-codemirror2\";\r\nimport * as Y from \"yjs\";\r\n// import { WebsocketProvider } from \"y-websocket\";\r\nimport { WebrtcProvider } from \"y-webrtc\";\r\nimport { getRandomColor } from \"service/getRandomColor\";\r\nimport CssBaseline from \"@material-ui/core/CssBaseline\";\r\ninterface AppProps {\r\n  editorInstance: any;\r\n  setEditorInstance: React.Dispatch<any>;\r\n}\r\n\r\nconst CodeMirrorEditor: React.FC<AppProps> = ({ editorInstance, setEditorInstance }) => {\r\n  const handleEditorDidMount = (editor: any) => {\r\n    //@ts-ignore\r\n    window.editor = editor;\r\n    setEditorInstance(editor);\r\n  };\r\n\r\n  const { id: roomID } = useParams<Record<string, string>>();\r\n\r\n  const { enqueueSnackbar } = useSnackbar();\r\n  const { language, fontSize, theme, keybinds } = useContext(SettingContext) as SettingsContextType;\r\n\r\n  const { user } = useContext(UserContext) as UserContextTypes;\r\n  const { guestName } = useContext(GuestNameContext) as GuestNameContextTypes;\r\n\r\n  // if login then user that else guest name else randome name :)))\r\n  const username = user?.name ? user.name : guestName;\r\n\r\n  useEffect(() => {\r\n    if (editorInstance != null) {\r\n      const ydoc: Y.Doc = new Y.Doc();\r\n      const yText = ydoc.getText(\"codemirror\");\r\n      const yUndoManager = new Y.UndoManager(yText);\r\n      // const provider = new WebsocketProvider(CDRT_SERVER, roomID, ydoc);\r\n\r\n      let provider;\r\n      try {\r\n        //@ts-ignore\r\n        provider = new WebrtcProvider(roomID, ydoc, {\r\n          signaling: [\r\n            \"wss://signaling.yjs.dev\",\r\n            \"wss://y-webrtc-signaling-eu.herokuapp.com\",\r\n            \"wss://y-webrtc-signaling-us.herokuapp.com\",\r\n          ],\r\n        });\r\n      } catch (err) {}\r\n\r\n      const awareness = provider?.awareness;\r\n      const val = getRandomColor(\"DEFAULT\");\r\n      awareness?.setLocalStateField(\"user\", {\r\n        // Define a print name that should be displayed\r\n        name: username,\r\n        // Define a color that should be associated to the user:\r\n        color: val, // should be a hex color: ;\r\n      });\r\n\r\n      const getBinding = new CodeMirrorBinding(yText, editorInstance, awareness, {\r\n        yUndoManager,\r\n      });\r\n    }\r\n  }, [editorInstance]);\r\n\r\n  return (\r\n    <div style={{ textAlign: \"left\", width: \"100%\", fontSize: `${fontSize}px` }}>\r\n      <CodeMirror\r\n        autoScroll\r\n        options={{\r\n          mode: language,\r\n          theme: theme,\r\n          keyMap: keybinds,\r\n          lineWrapping: true,\r\n          smartIndent: true,\r\n          lineNumbers: true,\r\n          foldGutter: true,\r\n          tabSize: 2,\r\n          gutters: [\"CodeMirror-linenumbers\", \"CodeMirror-foldgutter\"],\r\n          autoCloseTags: true,\r\n          matchBrackets: true,\r\n          autoCloseBrackets: true,\r\n          extraKeys: {\r\n            \"Ctrl-Space\": \"autocomplete\",\r\n          },\r\n        }}\r\n        editorDidMount={(editor) => {\r\n          handleEditorDidMount(editor);\r\n          editor.setSize(\"100%\", \"100%\");\r\n        }}\r\n      />\r\n    </div>\r\n  );\r\n};\r\n\r\nexport default CodeMirrorEditor;\r\n","C:\\movie book\\Cocode\\client\\src\\component\\TextChat\\index.tsx",[],"C:\\movie book\\Cocode\\client\\src\\component\\QuestionsPane\\ProblemPage\\ProblemPage.tsx",["203","204","205","206","207"],"import React, { useContext } from \"react\";\r\nimport parse from \"html-react-parser\";\r\nimport Chip from \"@material-ui/core/Chip\";\r\nimport { Box, Divider, Grid } from \"@material-ui/core\";\r\nimport { TabsContext } from \"service/TabsContext\";\r\nimport { TabsContextTypes } from \"types\";\r\nimport LeetCode from \"./LeetCode\";\r\nimport CodeForces from \"./CodeForces\";\r\n\r\nconst ProblemPage = () => {\r\n  const { questionData, showScrapped, scrappedData } = useContext(TabsContext) as TabsContextTypes;\r\n\r\n  return (\r\n    <div style={{ margin: \"1rem\" }}>\r\n      {showScrapped ? <CodeForces scrappedData={scrappedData} /> : <LeetCode questionData={questionData} />}\r\n    </div>\r\n  );\r\n};\r\n\r\nexport default ProblemPage;\r\n","C:\\movie book\\Cocode\\client\\src\\service\\getRandomColor.ts",[],"C:\\movie book\\Cocode\\client\\src\\component\\QuestionsPane\\ProblemPage\\CodeForces.tsx",["208","209","210","211"],"//@ts-nocheck\r\nimport React, { useRef, useState, createRef } from \"react\";\r\nimport parse from \"html-react-parser\";\r\nimport \"./ProblemPage.css\";\r\nimport Chip from \"@material-ui/core/Chip\";\r\nimport { Divider, Grid } from \"@material-ui/core\";\r\nimport { ScrappedDataType } from \"types\";\r\nimport renderMathInElement from \"katex/dist/contrib/auto-render\";\r\nimport \"katex/dist/katex.min.css\";\r\n\r\nconst LeetCode = ({ scrappedData }: { scrappedData: ScrappedDataType }) => {\r\n  const { hostname, htmlString } = scrappedData;\r\n  const MathRef = createRef<HTMLElement>();\r\n\r\n  React.useEffect(() => {\r\n    if (MathRef) {\r\n      renderMathInElement(MathRef.current!, {\r\n        delimiters: [\r\n          { left: \"$$$\", right: \"$$$\", display: true },\r\n          { left: \"\\\\[\", right: \"\\\\]\", display: true },\r\n          { left: \"%%\", right: \"%%\", display: true },\r\n          { left: \"\\\\(\", right: \"\\\\)\", display: false },\r\n        ],\r\n      });\r\n    }\r\n  }, [MathRef]);\r\n\r\n  return (\r\n    <div>\r\n      {hostname === \"codeforces.com\" ? (\r\n        <div className={\"codeforces\"} ref={MathRef}>\r\n          {parse(htmlString)}\r\n        </div>\r\n      ) : (\r\n        <div className={\"atcoder\"} ref={MathRef}>\r\n          {parse(htmlString)}\r\n        </div>\r\n      )}\r\n      <Divider />\r\n    </div>\r\n  );\r\n};\r\nexport default LeetCode;\r\n<div></div>;\r\n","C:\\movie book\\Cocode\\client\\src\\component\\TextChat\\ChatMessage.jsx",["212"],"import React from 'react';\r\nimport PropTypes from 'prop-types';\r\nimport cx from 'clsx';\r\nimport Grid from '@material-ui/core/Grid';\r\nimport Avatar from '@material-ui/core/Avatar';\r\nimport Typography from '@material-ui/core/Typography';\r\nimport withStyles from '@material-ui/core/styles/withStyles';\r\nimport styles from './ChatMessage-styles';\r\n\r\n// interface AppProps {\r\n//   classes?: any\r\n//   avatar: string;\r\n//   messages: string[];\r\n//   side: 'left' | 'right';\r\n//   GridContainerProps: Record<string, unknown>;\r\n//   GridItemProps: Record<string, unknown>;\r\n//   AvatarProps: Record<string, unknown>;\r\n//   getTypographyProps?: Function;\r\n// }\r\n\r\nconst ChatMsg = withStyles(styles, { name: 'ChatMsg' })((props) => {\r\n  const {\r\n    classes,\r\n    avatar,\r\n    messages,\r\n    side,\r\n    GridContainerProps,\r\n    GridItemProps,\r\n    AvatarProps,\r\n    getTypographyProps,\r\n  } = props;\r\n  const attachClass = (index) => {\r\n    if (index === 0) {\r\n      return classes[`${side}First`];\r\n    }\r\n    if (index === messages.length - 1) {\r\n      return classes[`${side}Last`];\r\n    }\r\n    return '';\r\n  };\r\n  return (\r\n    <Grid\r\n      container\r\n      spacing={2}\r\n      justify={side === 'right' ? 'flex-end' : 'flex-start'}\r\n      {...GridContainerProps}\r\n    >\r\n      {side === 'left' && (\r\n        <Grid item {...GridItemProps}>\r\n          <Avatar\r\n            src={avatar}\r\n            {...AvatarProps}\r\n            className={cx(classes.avatar, AvatarProps.className)}\r\n          />\r\n        </Grid>\r\n      )}\r\n      <Grid item xs={8}>\r\n        {messages.map((msg, i) => {\r\n          const TypographyProps = getTypographyProps(msg, i, props);\r\n          return (\r\n            // eslint-disable-next-line react/no-array-index-key\r\n            <div key={msg.id || i} className={classes[`${side}Row`]}>\r\n              <Typography\r\n                align={'left'}\r\n                {...TypographyProps}\r\n                className={cx(\r\n                  classes.msg,\r\n                  classes[side],\r\n                  attachClass(i),\r\n                  TypographyProps.className\r\n                )}\r\n              >\r\n                {msg}\r\n              </Typography>\r\n            </div>\r\n          );\r\n        })}\r\n      </Grid>\r\n    </Grid>\r\n  );\r\n});\r\n\r\nChatMsg.propTypes = {\r\n  avatar: PropTypes.string,\r\n  messages: PropTypes.arrayOf(PropTypes.string),\r\n  side: PropTypes.oneOf(['left', 'right']),\r\n  GridContainerProps: PropTypes.shape({}),\r\n  GridItemProps: PropTypes.shape({}),\r\n  AvatarProps: PropTypes.shape({}),\r\n  getTypographyProps: PropTypes.func,\r\n};\r\nChatMsg.defaultProps = {\r\n  avatar: '',\r\n  messages: [],\r\n  side: 'left',\r\n  GridContainerProps: {},\r\n  GridItemProps: {},\r\n  AvatarProps: {},\r\n  getTypographyProps: () => ({}),\r\n};\r\n\r\nexport default ChatMsg;\r\n","C:\\movie book\\Cocode\\client\\src\\component\\QuestionsPane\\ProblemPage\\LeetCode.tsx",["213"],"import React from \"react\";\r\nimport parse from \"html-react-parser\";\r\nimport \"./ProblemPage.css\";\r\nimport Chip from \"@material-ui/core/Chip\";\r\nimport { Box, Divider, Grid } from \"@material-ui/core\";\r\nimport { QuestionDataSS } from \"types\";\r\n\r\nconst LeetCode = ({ questionData }: { questionData: QuestionDataSS }) => {\r\n  const { question_data, companies, tags } = questionData;\r\n\r\n  return (\r\n    <div>\r\n      <Box className=\"leetcode\">\r\n        <h1>{question_data.question_title}</h1>\r\n        {parse(question_data.question)}\r\n        <Divider />\r\n        <Grid container>\r\n          <Grid item className=\"container-item\">\r\n            <div className={\"chips\"}>\r\n              {tags.map((tag, index) => (\r\n                <Chip label={tag} key={index} color=\"primary\" />\r\n              ))}\r\n            </div>\r\n          </Grid>\r\n          <Grid item className={\"container-item\"}>\r\n            <div className=\"chips\">\r\n              {companies.map((company, index) => (\r\n                <Chip label={company} key={index} color=\"primary\" />\r\n              ))}\r\n            </div>\r\n          </Grid>\r\n          <Grid item className={\"container-item\"}>\r\n            <a href={`${question_data.problem_url}/discuss`} target=\"_blank\" rel=\" \">\r\n              <h4>Solution</h4>\r\n            </a>\r\n          </Grid>\r\n        </Grid>\r\n      </Box>\r\n    </div>\r\n  );\r\n};\r\n\r\nexport default LeetCode;\r\n","C:\\movie book\\Cocode\\client\\src\\component\\TextChat\\ChatMessage-styles.ts",[],"C:\\movie book\\Cocode\\client\\src\\component\\Editor\\CodeMirrorImports.ts",[],"C:\\movie book\\Cocode\\client\\src\\component\\Editor\\CodeMirrorAdapter.js",[],"C:\\movie book\\Cocode\\client\\src\\component\\QuestionsPane\\ProblemList\\ProblemList.tsx",["214","215"],"import React, { useState, useEffect, useContext } from \"react\";\r\nimport AutoCompleteLabel from \"./Autocomplete\";\r\nimport { Button, ButtonGroup, Divider, IconButton, TextField, withStyles } from \"@material-ui/core\";\r\nimport ArrowForwardRoundedIcon from \"@material-ui/icons/ArrowForwardRounded\";\r\nimport axios, { AxiosResponse } from \"axios\";\r\nimport { SERVER_URL } from \"config.keys\";\r\nimport { allCompanies, allDifficulties, allTags } from \"./data\";\r\nimport ListPagination from \"./ListPagination\";\r\nimport Grid from \"@material-ui/core/Grid\";\r\nimport styles from \"./ProblemList.module.css\";\r\nimport { LabelType, QuestionListResponse, ScrappedDataType, TabsContextTypes } from \"types\";\r\nimport { tagsData, companiesData, difficultyData } from \"./data\";\r\nimport { TabsContext } from \"service/TabsContext\";\r\nimport Url from \"url-parse\";\r\nimport { useParams } from \"react-router-dom\";\r\n\r\ninterface AppProps {\r\n  companies: LabelType[];\r\n  tags: LabelType[];\r\n  difficulty: LabelType[];\r\n  url: string;\r\n  setCompanies: React.Dispatch<React.SetStateAction<LabelType[]>>;\r\n  setTags: React.Dispatch<React.SetStateAction<LabelType[]>>;\r\n  setDifficulty: React.Dispatch<React.SetStateAction<LabelType[]>>;\r\n  setUrl: React.Dispatch<React.SetStateAction<string>>;\r\n}\r\n\r\nconst CssTextField = withStyles({\r\n  root: {\r\n    height: \"100%\",\r\n    width: \"100%\",\r\n    \"& .MuiInputBase-root\": {\r\n      fontSize: \"12px\",\r\n      padding: \"0px\",\r\n      outline: \"none\",\r\n      color: \"#edf2fb\",\r\n    },\r\n    \"& label.Mui-focused\": {\r\n      color: \"#0055bb\",\r\n    },\r\n    \"& .MuiInput-underline:after\": {\r\n      borderBottomColor: \"#0055bb\",\r\n    },\r\n    \"& .MuiOutlinedInput-root\": {\r\n      \"& fieldset\": {\r\n        borderColor: \"#0055bb\",\r\n      },\r\n      \"&:hover fieldset\": {\r\n        borderColor: \"#0055bb\",\r\n      },\r\n      \"&.Mui-focused fieldset\": {\r\n        border: \"2px solid #0055bb \",\r\n      },\r\n    },\r\n  },\r\n})(TextField);\r\n\r\nconst ProblemList: React.FC<AppProps> = ({\r\n  companies,\r\n  difficulty,\r\n  tags,\r\n  url,\r\n  setCompanies,\r\n  setDifficulty,\r\n  setTags,\r\n  setUrl,\r\n}) => {\r\n  const [response, setResponse] = useState<QuestionListResponse[]>([]);\r\n  const [errorText, setErrorText] = useState({ error: false, comment: \"\" });\r\n  const { id: roomID } = useParams<Record<string, string>>();\r\n\r\n  useEffect(() => {\r\n    axios\r\n      .post(`${SERVER_URL}/api/fetch-problems`, prepareData())\r\n      .then((res: AxiosResponse<QuestionListResponse[]>) => setResponse(res.data));\r\n  }, []);\r\n\r\n  const { filterResponseData, handleScrappedData } = useContext(TabsContext) as TabsContextTypes;\r\n  const { id } = useParams<Record<string, string>>();\r\n\r\n  const NextButton = () => {\r\n    const getQuestionData = async () => {\r\n      const { hostname } = new Url(url);\r\n      if (hostname !== \"codeforces.com\" && hostname !== \"atcoder.jp\") {\r\n        setErrorText({\r\n          error: true,\r\n          comment: \"Domain should either be codeforces or atcoder\",\r\n        });\r\n      } else {\r\n        const { data }: AxiosResponse<{ error: boolean; htmlString: string }> = await axios({\r\n          method: \"POST\",\r\n          url: `${SERVER_URL}/api/fetch-contest-problem`,\r\n          responseType: \"json\",\r\n          data: {\r\n            url: url,\r\n            hostname: hostname,\r\n          },\r\n        });\r\n        const { error, htmlString } = data;\r\n\r\n        if (error) {\r\n          setErrorText({\r\n            error: true,\r\n            comment: \"Unable To fetch question\",\r\n          });\r\n        } else {\r\n          handleScrappedData(\r\n            {\r\n              htmlString,\r\n              hostname,\r\n            },\r\n            roomID,\r\n            true\r\n          );\r\n        }\r\n      }\r\n    };\r\n\r\n    return (\r\n      <Button\r\n        className={styles[\"adornment-button\"]}\r\n        style={{ color: \"#0055bb\" }}\r\n        onClick={async () => {\r\n          await getQuestionData();\r\n        }}\r\n      >\r\n        <ArrowForwardRoundedIcon />\r\n      </Button>\r\n    );\r\n  };\r\n\r\n  const prepareData = () => {\r\n    const c = companies.map((el) => el.name);\r\n    const d = difficulty.map((el) => el.name);\r\n    const t = tags.map((el) => el.name);\r\n    return {\r\n      companies: c.length ? c : allCompanies,\r\n      difficulty: d.length ? d : allDifficulties,\r\n      tags: t.length ? t : allTags,\r\n    };\r\n  };\r\n\r\n  const fetchProblems = async () => {\r\n    const response: AxiosResponse<QuestionListResponse[]> = await axios({\r\n      method: \"post\",\r\n      url: `${SERVER_URL}/api/fetch-problems`,\r\n      data: prepareData(),\r\n      responseType: \"json\",\r\n    });\r\n    setResponse(response.data);\r\n  };\r\n  const getRandomQuestion = () => {\r\n    const randomID = Math.floor(Math.random() * 169);\r\n    axios({\r\n      method: \"post\",\r\n      url: `${SERVER_URL}/api/get-problem`,\r\n      data: { question_id: randomID },\r\n      responseType: \"json\",\r\n    }).then((response) => filterResponseData(response.data, id));\r\n  };\r\n  return (\r\n    <>\r\n      <Grid container className={styles.root}>\r\n        <Grid item className={styles[\"request-field\"]}>\r\n          <label>Enter Codeforces Or Atcoder Question URL:</label>\r\n          <CssTextField\r\n            onChange={(e) => {\r\n              setUrl(e.target.value as string);\r\n            }}\r\n            value={url}\r\n            error={errorText.error}\r\n            helperText={errorText.comment}\r\n            variant=\"outlined\"\r\n            size=\"small\"\r\n            InputProps={{\r\n              endAdornment: <NextButton />,\r\n            }}\r\n          />\r\n        </Grid>\r\n\r\n        <Grid item className={styles.autocomplete}>\r\n          <AutoCompleteLabel\r\n            value={companies}\r\n            setValue={setCompanies}\r\n            labels={companiesData}\r\n            type=\"Companies\"\r\n          />\r\n          <AutoCompleteLabel value={tags} setValue={setTags} labels={tagsData} type=\"Tags\" />\r\n          <AutoCompleteLabel\r\n            value={difficulty}\r\n            setValue={setDifficulty}\r\n            labels={difficultyData}\r\n            type=\"Difficulty\"\r\n          />\r\n        </Grid>\r\n        <Grid item className={styles[\"btn-group\"]}>\r\n          <ButtonGroup color=\"inherit\">\r\n            <Button onClick={getRandomQuestion}>Random Problem</Button>\r\n            <Button\r\n              onClick={async () => {\r\n                await fetchProblems();\r\n              }}\r\n            >\r\n              Filter Problems\r\n            </Button>\r\n          </ButtonGroup>\r\n        </Grid>\r\n        <Divider className={styles.divider} />\r\n        <Grid item container direction=\"column\" className={styles.pagination}>\r\n          <ListPagination rows={response} />\r\n        </Grid>\r\n      </Grid>\r\n    </>\r\n  );\r\n};\r\n\r\nexport default ProblemList;\r\n","C:\\movie book\\Cocode\\client\\src\\component\\QuestionsPane\\SettingsPage.tsx",[],"C:\\movie book\\Cocode\\client\\src\\service\\getRandomAvatar.ts",[],"C:\\movie book\\Cocode\\client\\src\\component\\QuestionsPane\\ProblemList\\ListPagination.tsx",[],"C:\\movie book\\Cocode\\client\\src\\component\\QuestionsPane\\ProblemList\\Autocomplete.tsx",[],{"ruleId":"216","severity":1,"message":"217","line":6,"column":8,"nodeType":"218","messageId":"219","endLine":6,"endColumn":17},{"ruleId":"216","severity":1,"message":"220","line":7,"column":8,"nodeType":"218","messageId":"219","endLine":7,"endColumn":17},{"ruleId":"216","severity":1,"message":"221","line":8,"column":8,"nodeType":"218","messageId":"219","endLine":8,"endColumn":18},{"ruleId":"216","severity":1,"message":"222","line":13,"column":29,"nodeType":"218","messageId":"219","endLine":13,"endColumn":40},{"ruleId":"216","severity":1,"message":"223","line":20,"column":9,"nodeType":"218","messageId":"219","endLine":20,"endColumn":20},{"ruleId":"216","severity":1,"message":"224","line":24,"column":9,"nodeType":"218","messageId":"219","endLine":24,"endColumn":20},{"ruleId":"216","severity":1,"message":"225","line":24,"column":9,"nodeType":"218","messageId":"219","endLine":24,"endColumn":22},{"ruleId":"216","severity":1,"message":"226","line":1,"column":27,"nodeType":"218","messageId":"219","endLine":1,"endColumn":37},{"ruleId":"216","severity":1,"message":"227","line":3,"column":3,"nodeType":"218","messageId":"219","endLine":3,"endColumn":9},{"ruleId":"216","severity":1,"message":"228","line":11,"column":3,"nodeType":"218","messageId":"219","endLine":11,"endColumn":7},{"ruleId":"216","severity":1,"message":"229","line":14,"column":10,"nodeType":"218","messageId":"219","endLine":14,"endColumn":26},{"ruleId":"216","severity":1,"message":"230","line":22,"column":7,"nodeType":"218","messageId":"219","endLine":22,"endColumn":19},{"ruleId":"216","severity":1,"message":"231","line":36,"column":27,"nodeType":"218","messageId":"219","endLine":36,"endColumn":45},{"ruleId":"232","severity":1,"message":"233","line":54,"column":15,"nodeType":"234","endLine":54,"endColumn":56},{"ruleId":"235","severity":1,"message":"236","line":5,"column":58,"nodeType":"237","messageId":"238","endLine":5,"endColumn":60},{"ruleId":"239","severity":1,"message":"240","line":5,"column":10,"nodeType":"218","messageId":"219","endLine":5,"endColumn":14},{"ruleId":"241","severity":1,"message":"242","line":27,"column":15,"nodeType":"243","messageId":"238","endLine":27,"endColumn":20},{"ruleId":"244","severity":1,"message":"245","line":1,"column":8,"nodeType":"218","messageId":"246","endLine":1,"endColumn":13},{"ruleId":"216","severity":1,"message":"247","line":1,"column":10,"nodeType":"218","messageId":"219","endLine":1,"endColumn":26},{"ruleId":"216","severity":1,"message":"248","line":2,"column":52,"nodeType":"218","messageId":"219","endLine":2,"endColumn":68},{"ruleId":"216","severity":1,"message":"249","line":2,"column":18,"nodeType":"218","messageId":"219","endLine":2,"endColumn":24},{"ruleId":"216","severity":1,"message":"250","line":1,"column":40,"nodeType":"218","messageId":"219","endLine":1,"endColumn":46},{"ruleId":"216","severity":1,"message":"251","line":2,"column":10,"nodeType":"218","messageId":"219","endLine":2,"endColumn":21},{"ruleId":"216","severity":1,"message":"252","line":16,"column":8,"nodeType":"218","messageId":"219","endLine":16,"endColumn":19},{"ruleId":"216","severity":1,"message":"253","line":31,"column":11,"nodeType":"218","messageId":"219","endLine":31,"endColumn":26},{"ruleId":"216","severity":1,"message":"254","line":68,"column":13,"nodeType":"218","messageId":"219","endLine":68,"endColumn":23},{"ruleId":"216","severity":1,"message":"255","line":2,"column":8,"nodeType":"218","messageId":"219","endLine":2,"endColumn":13},{"ruleId":"216","severity":1,"message":"256","line":3,"column":8,"nodeType":"218","messageId":"219","endLine":3,"endColumn":12},{"ruleId":"216","severity":1,"message":"257","line":4,"column":10,"nodeType":"218","messageId":"219","endLine":4,"endColumn":13},{"ruleId":"216","severity":1,"message":"258","line":4,"column":15,"nodeType":"218","messageId":"219","endLine":4,"endColumn":22},{"ruleId":"216","severity":1,"message":"259","line":4,"column":24,"nodeType":"218","messageId":"219","endLine":4,"endColumn":28},{"ruleId":"216","severity":1,"message":"250","line":2,"column":17,"nodeType":"218","messageId":"219","endLine":2,"endColumn":23},{"ruleId":"216","severity":1,"message":"260","line":2,"column":25,"nodeType":"218","messageId":"219","endLine":2,"endColumn":33},{"ruleId":"216","severity":1,"message":"256","line":5,"column":8,"nodeType":"218","messageId":"219","endLine":5,"endColumn":12},{"ruleId":"216","severity":1,"message":"259","line":6,"column":19,"nodeType":"218","messageId":"219","endLine":6,"endColumn":23},{"ruleId":"244","severity":1,"message":"245","line":1,"column":8,"nodeType":"218","messageId":"246","endLine":1,"endColumn":13},{"ruleId":"261","severity":1,"message":"262","line":33,"column":13,"nodeType":"234","messageId":"263","endLine":33,"endColumn":86,"fix":"264"},{"ruleId":"216","severity":1,"message":"265","line":3,"column":40,"nodeType":"218","messageId":"219","endLine":3,"endColumn":50},{"ruleId":"216","severity":1,"message":"247","line":11,"column":43,"nodeType":"218","messageId":"219","endLine":11,"endColumn":59},"@typescript-eslint/no-unused-vars","'GoogleSVG' is defined but never used.","Identifier","unusedVar","'GithubPNG' is defined but never used.","'TwitterPNG' is defined but never used.","'IS_DISABLED' is defined but never used.","'handleLogin' is assigned a value but never used.","'PUBLIC_ROOM' is assigned a value but never used.","'CodeMirrorRef' is assigned a value but never used.","'useContext' is defined but never used.","'Avatar' is defined but never used.","'Zoom' is defined but never used.","'UserContextTypes' is defined but never used.","'LightTooltip' is assigned a value but never used.","'setBackToLoginPage' is assigned a value but never used.","jsx-a11y/alt-text","img elements must have an alt prop, either with meaningful text, or an empty string for decorative images.","JSXOpeningElement","eqeqeq","Expected '===' and instead saw '=='.","BinaryExpression","unexpected","no-unused-vars","'Link' is defined but never used.","no-dupe-keys","Duplicate key 'color'.","ObjectExpression","no-use-before-define","'React' was used before it was defined.","usedBeforeDefined","'ScrappedDataType' is defined but never used.","'CircularProgress' is defined but never used.","'Button' is defined but never used.","'useRef' is defined but never used.","'CDRT_SERVER' is defined but never used.","'CssBaseline' is defined but never used.","'enqueueSnackbar' is assigned a value but never used.","'getBinding' is assigned a value but never used.","'parse' is defined but never used.","'Chip' is defined but never used.","'Box' is defined but never used.","'Divider' is defined but never used.","'Grid' is defined but never used.","'useState' is defined but never used.","react/jsx-no-target-blank","Using target=\"_blank\" without rel=\"noreferrer\" (which implies rel=\"noopener\") is a security risk in older browsers: see https://mathiasbynens.github.io/rel-noopener/#recommendations","noTargetBlankWithoutNoreferrer",{"range":"266","text":"267"},"'IconButton' is defined but never used.",[1231,1234],"\"  noreferrer\""]